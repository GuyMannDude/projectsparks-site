(function(global) {
    'use strict';
    
    function ChatboxReader(options) {
        this.options = Object.assign({
            container: '#chatbox-reader',
            messages: [],
            showTimestamps: true,
            autoScroll: true
        }, options);
        
        this.container = typeof this.options.container === 'string' 
            ? document.querySelector(this.options.container)
            : this.options.container;
            
        this.messages = this.options.messages || [];
        this.init();
    }
    
    ChatboxReader.prototype.init = function() {
        if (!this.container) {
            console.error('ChatboxReader: Container not found');
            return;
        }
        
        this.createReader();
        this.render();
    };
    
    ChatboxReader.prototype.createReader = function() {
        this.container.innerHTML = `
            <div class="chatbox-reader">
                <div class="chatbox-reader-header">Messages</div>
                <div class="chatbox-reader-messages"></div>
                <div class="chatbox-reader-input-container">
                    <textarea class="chatbox-reader-input" placeholder="Click to auto-paste from clipboard..." rows="2"></textarea>
                </div>
            </div>
        `;
        
        this.messagesContainer = this.container.querySelector('.chatbox-reader-messages');
        this.inputField = this.container.querySelector('.chatbox-reader-input');
        this.bindInputEvents();
    };
    
    ChatboxReader.prototype.render = function() {
        if (this.messages.length === 0) {
            this.messagesContainer.innerHTML = '<div class="chatbox-reader-empty">No messages yet</div>';
            return;
        }
        
        const messagesHtml = this.messages.map(message => this.renderMessage(message)).join('');
        this.messagesContainer.innerHTML = messagesHtml;
        
        if (this.options.autoScroll) {
            this.scrollToBottom();
        }
    };
    
    ChatboxReader.prototype.renderMessage = function(message) {
        const time = this.options.showTimestamps ? 
            `<div class="chatbox-message-time">${this.formatTime(message.timestamp || new Date())}</div>` : '';
            
        return `
            <div class="chatbox-message ${message.type || 'user'}">
                <div class="chatbox-message-content">${this.escapeHtml(message.content)}</div>
                ${time}
            </div>
        `;
    };
    
    ChatboxReader.prototype.addMessage = function(message) {
        this.messages.push(message);
        this.render();
    };
    
    ChatboxReader.prototype.clearMessages = function() {
        this.messages = [];
        this.render();
    };
    
    ChatboxReader.prototype.setMessages = function(messages) {
        this.messages = messages;
        this.render();
    };
    
    ChatboxReader.prototype.scrollToBottom = function() {
        const reader = this.container.querySelector('.chatbox-reader');
        reader.scrollTop = reader.scrollHeight;
    };
    
    ChatboxReader.prototype.formatTime = function(date) {
        if (!(date instanceof Date)) {
            date = new Date(date);
        }
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    };
    
    ChatboxReader.prototype.escapeHtml = function(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    };
    
    ChatboxReader.prototype.bindInputEvents = function() {
        const self = this;
        
        this.inputField.addEventListener('click', function() {
            console.log('ChatboxReader: Click event triggered');
            setTimeout(function() {
                console.log('ChatboxReader: About to call autoPasteFromClipboard after 100ms delay');
                self.autoPasteFromClipboard();
            }, 100);
        });
    };
    
    ChatboxReader.prototype.autoPasteFromClipboard = async function() {
        console.log('ChatboxReader: autoPasteFromClipboard called');
        try {
            if (navigator.clipboard && navigator.clipboard.readText) {
                console.log('ChatboxReader: Clipboard API available, reading text...');
                const clipboardText = await Promise.race([
                    navigator.clipboard.readText(),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('Clipboard read timeout')), 2000))
                ]);
                console.log('ChatboxReader: Clipboard text read:', clipboardText);
                if (clipboardText && clipboardText.trim()) {
                    console.log('ChatboxReader: Setting input field value to:', clipboardText);
                    this.inputField.value = clipboardText;
                    this.inputField.dispatchEvent(new Event('input', { bubbles: true }));
                    console.log('ChatboxReader: Auto-paste completed successfully');
                } else {
                    console.log('ChatboxReader: Clipboard text is empty or whitespace only');
                }
            } else {
                console.warn('ChatboxReader: Clipboard API not available, trying fallback method');
                this.tryFallbackPaste();
            }
        } catch (error) {
            console.warn('ChatboxReader: Failed to read clipboard:', error);
            console.log('ChatboxReader: Trying fallback paste method');
            this.tryFallbackPaste();
        }
    };
    
    ChatboxReader.prototype.tryFallbackPaste = function() {
        console.log('ChatboxReader: Attempting fallback paste using execCommand');
        try {
            this.inputField.focus();
            const success = document.execCommand('paste');
            if (success) {
                console.log('ChatboxReader: Fallback paste successful');
                this.inputField.dispatchEvent(new Event('input', { bubbles: true }));
            } else {
                console.warn('ChatboxReader: Fallback paste failed');
            }
        } catch (error) {
            console.warn('ChatboxReader: Fallback paste error:', error);
        }
    };
    
    global.ChatboxReader = ChatboxReader;
    
})(typeof window !== 'undefined' ? window : this);
